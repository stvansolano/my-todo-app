# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '2b3a0bb4-f60b-4ca6-a178-b5ac8f365578'
  imageRepository: 'signalrfunctions'
  containerRegistry: 'mydemos.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Serverless/SignalR/Dockerfile'
  tag: '$(Build.BuildId)'
  buildConfiguration: 'Release'
  vmImageName: 'ubuntu-latest'
  
stages:
- stage: BuildArtifact
  displayName: Build function artifact
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UseDotNet@2 
      displayName: ".NET Core 3.1.x"
      inputs:
        version: '3.1.x'
        packageType: sdk
    - script: dotnet build Serverless/SignalR/SignalR-functions.csproj --configuration $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: "Test"
      inputs:
        command: test
        projects: '**/*tests/*.csproj'
        arguments: '--configuration $(buildConfiguration)'

    #- task: UseDotNet@2 
    #  displayName: ".NET Core 3.1.x"
    #  inputs:
    #    version: '3.1.x'
    #    packageType: sdk
    #- script: dotnet publish Serverless/SignalR/SignalR-functions.csproj  -r linux-x64 --output $(Build.ArtifactStagingDirectory)' --configuration $(buildConfiguration)
    #  displayName: 'dotnet build $(buildConfiguration)'

    #- task: DotNetCoreCLI@2
    #  displayName: "Publish"
    #  inputs:
    #    command: 'publish'
    #    projects: '**/SignalR-functions.csproj'
    #    arguments: '-r linux-x64 --configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    #    zipAfterPublish: true
    #    workingDirectory: 'Serverless/SignalR'

    - task: PublishBuildArtifacts@1
      displayName: "Upload Artifacts"
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
        artifactName: 'signalr-functions' 

- stage: BuildDocker
  displayName: Build and push stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

